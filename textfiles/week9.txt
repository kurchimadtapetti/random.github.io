activity_main.xml




<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:gravity="center"
    tools:context=".MainActivity">

    <EditText
        android:id="@+id/editTextText"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:ems="10"
        android:hint="UserName"
        android:inputType="text"
        android:minHeight="48dp" />

    <EditText
        android:id="@+id/editTextNumber"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/editTextText"
        android:ems="10"
        android:hint="contact number"
        android:inputType="number"
        android:minHeight="48dp" />

    <EditText
        android:id="@+id/editTextDate"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_below="@+id/editTextNumber"
        android:ems="10"
        android:hint="date of birth"
        android:inputType="date"
        android:minHeight="48dp" />

    <Button
        android:id="@+id/button"
        android:layout_width="210dp"
        android:layout_height="wrap_content"
        android:layout_below="@+id/editTextDate"
        android:text="Insert new data" />

    <Button
        android:id="@+id/button2"
        android:layout_width="210dp"
        android:layout_height="wrap_content"
        android:layout_below="@+id/button"
        android:text="Update data" />

    <Button
        android:id="@+id/button3"
        android:layout_width="210dp"
        android:layout_height="wrap_content"
        android:layout_below="@+id/button2"
        android:text="delete data" />

    <Button
        android:id="@+id/button4"
        android:layout_width="210dp"
        android:layout_height="wrap_content"
        android:layout_below="@+id/button3"
        android:text="View data" />


</RelativeLayout>




MainActivity.java

package com.example.week9;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;

import android.database.Cursor;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.Toast;

public class MainActivity extends AppCompatActivity {
    EditText name,contact,dob;
    Button insert,update,delete,view;
    DBHelper DB;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        name=findViewById(R.id.editTextText);
        contact=findViewById(R.id.editTextNumber);
        dob=findViewById(R.id.editTextDate);
        insert=findViewById(R.id.button);
        update=findViewById(R.id.button2);
        delete=findViewById(R.id.button3);
        view=findViewById(R.id.button4);
        DB=new DBHelper(this);
        insert.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String nameTXT=name.getText().toString();
                String contactTXT=contact.getText().toString();
                String dobTXT=dob.getText().toString();
                Boolean checkinsertdata=DB.insertdata(nameTXT,contactTXT,dobTXT);
                if(checkinsertdata==true)
                    Toast.makeText(MainActivity.this, "new entry inserted", Toast.LENGTH_SHORT).show();
                else
                    Toast.makeText(MainActivity.this, "new entry not inserted", Toast.LENGTH_SHORT).show();

            }

        });
        update.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                String nameTXT=name.getText().toString();
                String contactTXT=contact.getText().toString();
                String dobTXT=dob.getText().toString();
                Boolean checkupdatedata=DB.updatedata(nameTXT,contactTXT,dobTXT);
                if(checkupdatedata==true)
                    Toast.makeText(MainActivity.this, "entry updated", Toast.LENGTH_SHORT).show();
                else
                    Toast.makeText(MainActivity.this, " entry not updated", Toast.LENGTH_SHORT).show();

            }

        });
        delete.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                String nameTXT=name.getText().toString();

                Boolean checkdeletedata=DB.deletedata(nameTXT);
                if(checkdeletedata==true)
                    Toast.makeText(MainActivity.this, "entry deleted", Toast.LENGTH_SHORT).show();
                else
                    Toast.makeText(MainActivity.this, " entry not deleted", Toast.LENGTH_SHORT).show();

            }

        });
        view.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                Cursor res= DB.getdata();
                if(res.getCount()==0){
                    Toast.makeText(MainActivity.this, "NO ENTRY EXISTS", Toast.LENGTH_SHORT).show();
                    return;
                }
                StringBuffer buffer=new StringBuffer();
                while (res.moveToNext()){
                    buffer.append("Name:"+res.getString(0)+"\n");
                    buffer.append("Contact:"+res.getString(1)+"\n");
                    buffer.append("Date of Birth:"+res.getString(2)+"\n\n");

                }
                AlertDialog.Builder builder=new AlertDialog.Builder(MainActivity.this);
                builder.setCancelable(true);
                builder.setTitle("User Entries");
                builder.setMessage(buffer.toString());
                builder.show();
            }

        });
    }
}





DBHelper.java

package com.example.week9;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import androidx.annotation.Nullable;
public class DBHelper  extends SQLiteOpenHelper {
    // creating a constructor for our database handler.
    public DBHelper(Context context) {
        super(context, "userdata.db", null, 1);
    }

    // below method is for creating a database by running a sqlite query
    @Override
    public void onCreate(SQLiteDatabase DB) {
        DB.execSQL("create Table Userdetails(name TEXT primary key,contact TEXT ,dob TEXT )");
    }

    @Override
    public void onUpgrade(SQLiteDatabase DB, int i, int i1) {
        // this method is called to check if the table exists already.
        DB.execSQL("drop table if exists userdetails");
    }

    public boolean insertdata(String name, String contact, String dob) {
        SQLiteDatabase DB = this.getWritableDatabase();
        ContentValues contentValues = new ContentValues();

        contentValues.put("name", name);
        contentValues.put("contact", contact);
        contentValues.put("dob", dob);
        long result = DB.insert("Userdetails", null, contentValues);
        if (result == -1) {
            return false;
        } else
            return true;
    }


    public boolean updatedata(String name, String contact, String dob) {
        SQLiteDatabase DB = this.getWritableDatabase();
        ContentValues contentValues = new ContentValues();
        contentValues.put("contact", contact);
        contentValues.put("dob", dob);
        Cursor cursor = DB.rawQuery("select * from Userdetails where name=?", new String[]{name});
        if (cursor.getCount() > 0) {
            long result = DB.update("Userdetails", contentValues, "name=?", new String[]{name});

            if (result == -1) {
                return false;
            } else {
                return true;
            }
        } else {
            return false;

        }
    }
    public boolean deletedata(String name) {
        SQLiteDatabase DB = this.getWritableDatabase();


        Cursor cursor = DB.rawQuery("select * from Userdetails where name=?", new String[]{name});
        if (cursor.getCount() > 0) {
            long result = DB.delete("Userdetails", "name=?", new String[]{name});

            if (result == -1) {
                return false;
            } else {
                return true;
            }
        } else {
            return false;

        }
    }
    public  Cursor getdata() {
        SQLiteDatabase DB = this.getWritableDatabase();

        Cursor cursor = DB.rawQuery("select * from Userdetails ", null);
        return  cursor;
    }
}
